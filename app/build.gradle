apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.0"
}

android {
    compileSdkVersion 28
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "ch.epfl.sweng.studyup"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        android.defaultConfig.vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        testOptions.unitTests.all {
            testLogging {
                exceptionFormat "full"
                showCauses true
                showExceptions true
                showStackTraces true
                showStandardStreams true
                events = ["passed", "skipped", "failed", "standardOut", "standardError"]
            }
        }
        animationsDisabled = true
    }
    productFlavors {
    }
    android {
        lintOptions {
            abortOnError false
        }

    }

    dependencies {
        implementation 'com.github.quivr:android-week-view:2.3.0'
        androidTestImplementation('com.android.support.test.uiautomator:uiautomator-v18:2.1.3')
        implementation fileTree(include: ['*.jar'], dir: 'libs')
        implementation 'com.android.support:exifinterface:28.0.0'
        implementation 'com.android.support:appcompat-v7:28.0.0-rc02'
        implementation 'com.android.support.constraint:constraint-layout:1.1.3'
        implementation 'com.android.support:design:28.0.0'
        implementation 'com.github.antonKozyriatskyi:CircularProgressIndicator:1.2.2'
        testImplementation 'junit:junit:4.12'
        testImplementation "org.robolectric:robolectric:3.4.2"
        androidTestImplementation 'com.android.support.test:runner:1.0.2'
        androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
        androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
        androidTestImplementation 'com.android.support.test:rules:1.0.2'
        implementation 'com.google.code.gson:gson:2.8.5'
        // Firebase
        implementation 'com.google.firebase:firebase-core:16.0.4' // Core
        implementation 'com.google.firebase:firebase-auth:16.0.4' // Auth
        implementation 'com.google.firebase:firebase-firestore:17.1.1' // Database
        implementation 'com.google.firebase:firebase-storage:16.0.3' // Cloud storage for files
        implementation 'com.android.support:multidex:1.0.3'
        implementation 'com.android.support:support-v4:28.0.0'
        implementation 'com.android.support:support-media-compat:28.0.0'
        implementation 'com.google.android.gms:play-services-location:16.0.0'
        implementation 'com.google.android.gms:play-services-maps:16.0.0'
        //Database
        implementation 'android.arch.persistence.room:runtime:1.1.0'
        annotationProcessor 'android.arch.persistence.room:compiler:1.1.0'
        testImplementation 'org.powermock:powermock-api-mockito:1.6.2'
        testImplementation 'org.powermock:powermock-module-junit4-rule-agent:1.6.2'
        testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.2'
        testImplementation 'org.powermock:powermock-module-junit4:1.6.2'
        implementation 'com.squareup.picasso:picasso:2.71828'
        implementation 'de.hdodenhof:circleimageview:2.1.0'


    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        testLogging {
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
            events = ["passed", "skipped", "failed", "standardOut", "standardError"]
        }
    }


    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def autoGeneratedFiles = ['**/QuestionDAO_Impl*', '**/QuestionDatabase_Impl*']
        def mockFilter = ['**/pathFromGalleryGetter*']
        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*'] + autoGeneratedFiles + mockFilter
        def srcFilter = autoGeneratedFiles + mockFilter

        def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = fileTree(dir: "$project.projectDir/src/main/java", excludes: srcFilter)

        sourceDirectories = files([mainSrc])
        classDirectories = files([debugTree])
        executionData = fileTree(dir: project.buildDir, includes: [
                'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'],
                excludes: srcFilter)
    }

    apply plugin: 'com.google.gms.google-services'
}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:+'
    implementation files('libs/FileCacher.jar')
    implementation 'com.android.support:support-v4:28.0.0'
}
